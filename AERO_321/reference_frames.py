# -*- coding: utf-8 -*-
"""reference_frames.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1311KYDSm8NMmbkxx6QngMwPKB4sZjS7t
"""

import numpy as np

# l and phi given
l = np.array([-1/2, np.sqrt(3)/2, 0])
phi = np.radians(3)

# calculate bns from l and phi
b0 = np.cos(phi/2)
b1 = l[0]*np.sin(phi/2)
b2 = l[1]*np.sin(phi/2)
b3 = l[2]*np.sin(phi/2)

# calculate T from bns
T = np.matrix([[b0**2 + b1**2 - b2**2 - b3**2, 2*(b1*b2 + b0*b3)            , 2*(b1*b3 - b0*b2)            ],
               [2*(b1*b2 - b0*b3)            , b0**2 - b1**2 + b2**2 - b3**2, 2*(b2*b3 + b0*b1)            ],
               [2*(b1*b3 + b0*b2)            , 2*(b2*b3 - b0*b1)            , b0**2 - b1**2 - b2**2 + b3**2]])

# i2 vector is aligned w the missle so this will have the yaw and pitch
# corresponding for the misalignment for the boresight

# i2 in the missle vector frame (rotated one)
i2m = np.matrix([[1], [0], [0]])

# getting i2 in the body frame
i2b = (T.T*i2m)
i2b = [i2b[0, 0], i2b[1, 0], i2b[2, 0]]

# can calculate the yaw and pitch using the i2 in the body frame
pitch = np.arccos(np.sqrt(i2b[0]**2 + i2b[1]**2))
yaw = -np.arccos(i2b[0]/np.sqrt(i2b[0]**2 + i2b[1]**2))

# getting the roll angle using the calculated yaw, pitch, and DCM
from numpy import cos, sin, matrix
print()

# yaw rotation
t3 = matrix([[cos(yaw), sin(yaw), 0],
             [-sin(yaw), cos(yaw), 0],
                [0, 0, 1]])

# pitch rotation
t2 = matrix([[cos(pitch), 0, -sin(pitch)],
             [0 , 1, 0],
             [sin(pitch), 0, cos(pitch)]])

# roll rotation
t1= T@t3.T@t2.T


roll = np.arcsin(t1[1,2])

# ---- results

print("l:", l)
print("phi:", np.degrees(phi))
print("b_n's:", [b0, b1, b2, b3])
print()
print(T)
print()
print("pitch:", np.degrees(pitch))
print("yaw:", np.degrees(yaw))
print("roll:", np.degrees(roll))

# ---- checking work

t1 = matrix([[1, 0, 0],
             [0 , cos(roll), sin(roll)],
             [0, -sin(roll), cos(roll)]])
print(t1)
print(T@l)
print(t1@t2@t3@l)

from numpy import matrix, sin, cos, degrees, radians, arcsin, arctan

phi   = radians(10)
theta = radians(20)
psi   = radians(10)

Fa = matrix([[20  ],
             [-30 ],
             [-100]])

alpha = arctan((cos(phi)*sin(theta)*cos(psi) + sin(psi)*sin(phi))/(cos(theta)*cos(psi)))
beta = arcsin(sin(phi)*sin(theta)*cos(psi) - cos(phi)*sin(psi))

Twb = matrix([[cos(alpha)*cos(beta), -cos(alpha)*sin(beta), -sin(alpha)],
              [sin(beta)           ,  cos(beta)           ,  0         ],
              [sin(alpha)*cos(beta), -sin(alpha)*sin(beta),  cos(alpha)]])

print(degrees(beta))
Tbw = Twb.T
print(Twb.T)
Fw = Tbw@Fa

print(Fw)