# -*- coding: utf-8 -*-
"""stability_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hb0gsQzP58_8XkERcO7VZ561D3aB9LeQ
"""

# 1

# imports
from numpy import linspace, array
from sympy import Matrix, symbols
from IPython.display import display
import matplotlib.pyplot as plt

# givens
Clw, Clh, xcg_bar = symbols("C_L_W, C_L_H, X_cg")
X_ac_w_bar = 0.25
X_ac_h_bar = 3
Cm_ac_w = -0.1
X_np_bar = 0.5
Cl = 0.5
n_h = 1
ShSw = 0.25

# given eq for cd
Cd = 0.0325 + 0.035*Clw**2 + 0.03*Clh**2

# solving Cd for all xcgs
xcg_list = list(linspace(0.25, .7, 200))
Cd_list = []
for x in xcg_list:
  A = Matrix([[1 , n_h*ShSw],
              [x - X_ac_w_bar, n_h*ShSw*(x - X_ac_h_bar)]])
  F = Matrix([[Cl],
              [-Cm_ac_w]])

  q = A.solve(F)

  num1 = float(q[0, 0])
  num2 = float(q[1, 0])
  num3 = float(Cd.subs([(Clw, num1), (Clh, num2)]))

  Cd_list.append(num3)

# plotting X_cg vs Cd
plt.plot(xcg_list, Cd_list)
plt.xlabel("X_cg_bar")
plt.ylabel("C_D")
plt.title("C_D vs X_cg_bar")
plt.show()

# finding xcg for min drag
min_Cd = min(Cd_list)
for i in range(len(Cd_list)):
  if Cd_list[i] == min_Cd:
    min_Xcg = xcg_list[i]

print(min_Xcg)
print(X_np_bar - min_Xcg)

# 1

# imports
from numpy import linspace, array
from sympy import Matrix, symbols
from IPython.display import display
import matplotlib.pyplot as plt

# givens
Clw, Clh, xcg_bar = symbols("C_L_W, C_L_H, X_cg")
X_ac_w_bar = 0.25
X_ac_h_bar = 3
Cm_ac_w = -0.1
X_np_bar = 0.5
Cl = 0.5
n_h = 1
ShSw = 0.25

# given eq for cd
Cd = 0.0325 + 0.035*Clw**2 + 0.3*Clh**2

# solving Cd for all xcgs

A = Matrix([[1 , n_h*ShSw],
           [xcg_bar - X_ac_w_bar, n_h*ShSw*(xcg_bar - X_ac_h_bar)]])

F = Matrix([[Cl],
           [-Cm_ac_w]])
print("A matrix:")
display(A)
print()
print("B vector:")
display(F)
print()
q = A.solve(F)
print("Clw, Clh:")
display(q)
print()
print("Cd:")
Cdeq = Cd.subs([(Clw, q[0, 0]), (Clh, q[1, 0])])
display(Cdeq)

xcg_list = list(linspace(0.25, .7, 200))
Cd_list = []
for x in xcg_list:
  num = float(Cdeq.subs(xcg_bar, x))

  Cd_list.append(num)

# plotting X_cg vs Cd
plt.plot(xcg_list, Cd_list)
plt.xlabel("X_cg_bar")
plt.ylabel("C_D")
plt.title("C_D vs X_cg_bar")
plt.show()

# finding xcg for min drag
min_Cd = min(Cd_list)
for i in range(len(Cd_list)):
  if Cd_list[i] == min_Cd:
    min_Xcg = xcg_list[i]

print(min_Xcg)

# 2

# imports
from numpy import sqrt, pi, linspace, array
from sympy import symbols
from IPython.display import display
import matplotlib.pyplot as plt

# givens
c_w_bar = 5.7
X_ac_wf = 0.23*c_w_bar
n_h = 0.9
S_w = 184
Cl_a_w = 4.44
AR_w = 6
Cl_a_h = 3.9
X_ac_h = 17
S_h = symbols("S_H")

# solve for b
b_w = sqrt(AR_w * S_w)
print(b_w)

# solve for k
l_h = X_ac_h
k = 1 + 1/sqrt(1 + (l_h/b_w)**2) * (1/(pi*(l_h/b_w)) + 1)
print(k)

# solve for dE_da
e = 1
dE_da = Cl_a_w/(pi*e*AR_w)*k
print(dE_da)

# solve for Cl_a
Cl_a = Cl_a_w + Cl_a_h*n_h*S_h/S_w*(1 - dE_da)
display(Cl_a)

# solve for X_ac_wf_bar and X_ac_h_bar
X_ac_wf_bar = X_ac_wf/c_w_bar
X_ac_h_bar = X_ac_h/c_w_bar
print(X_ac_wf_bar)
print(X_ac_h_bar)

# solve for X_np_bar
X_np_bar = (Cl_a_w*X_ac_wf_bar + Cl_a_h*n_h*S_h/S_w*X_ac_h_bar*(1 - dE_da))/Cl_a
display(X_np_bar)

# Getting X_np_bar values for S_H ranging from 0 to 80 ft
# Getting X_cg_bar values for S_H ranging from 0 to 80 ft
S_h_vals = linspace(0, 80, 200)
X_np_vals = []
X_cg_vals = []
for S in S_h_vals:
  num1 = float(X_np_bar.subs(S_h, S))
  num2 = float(0.32 + 0.0007*S)
  X_np_vals.append(num1)
  X_cg_vals.append(num2)
X_np_vals = array(X_np_vals)
X_cg_vals = array(X_cg_vals)

# plotting both X_np and X_cg va S_H
plt.plot(S_h_vals, X_np_vals, label="X_np_bar")
plt.plot(S_h_vals, X_cg_vals, label="X_cg_bar")
plt.xlabel("S_H (feet^2)")
plt.ylabel("X_bar")
plt.title("X_bar vs S_H")
plt.legend()
plt.show()

# getting list of areas for SM between 5 and 15 percent

S_h_list = []
for i in range(len(S_h_vals)):
  SM = X_np_vals[i] - X_cg_vals[i]
  if 0.05 <= abs(SM) <= 0.15:
    S_h_list.append(S_h_vals[i])
print(min(S_h_list))
print(max(S_h_list))

# 4

# givens
c_w_bar  = 5.7
S_w = 184
Cl_a_wf = 4.85
S_h = 43
dX_ac_h_X_cg = 11.7
Cl_a_h= 3.77
n_h = 0.9
dE_h_da = 0.35
X_ac_wf_bar = 0.23
X_cg_bar = 0.25

# solve for Cla:
Cl_a = Cl_a_wf + Cl_a_h*n_h*S_h/S_w*(1 - dE_h_da)
print(Cl_a)

# solve for Xac_h bar:
X_ac_h_bar = 1/c_w_bar*dX_ac_h_X_cg + X_cg_bar
print(X_ac_h_bar)

# solve for Cma
Cm_a = Cl_a*X_cg_bar - (Cl_a_wf*X_ac_wf_bar + Cl_a_h*n_h*S_h/S_w*X_ac_h_bar*(1 - dE_h_da))
print(Cm_a)

# solve for SM
SM = -Cm_a/Cl_a
print(SM)