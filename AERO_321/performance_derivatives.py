# -*- coding: utf-8 -*-
"""performance_derivatives

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KAMLPKbhi7655QunIH2nRPykMKtSYAO3
"""

from numpy import sin, cos, matrix, radians

# givens
a = radians(10)

I_b = matrix([[1400, 0    , 300  ],
              [0   , 25000, 0    ],
              [300 , 0    , 27000]])

w_s = matrix([[radians(90)],
              [0          ],
              [0          ]])

# body to stability DCM
T_bs = matrix([[ cos(a), 0, sin(a)],
               [ 0     , 1, 0     ],
               [-sin(a), 0, cos(a)]])

# a)
I_s = T_bs*I_b*T_bs.T

# b)
w_b = T_bs.T*w_s

# c)
P, Q, R, = w_b[0, 0], w_b[1, 0], w_b[2, 0]
P_stab = w_s[0, 0]

Ixx, Iyy, Izz, Ixz = I_b[0, 0], I_b[1, 1], I_b[2, 2], -I_b[0, 2]

m1 = P*R*(Ixx - Izz) + (P**2 - R**2)*Ixz
m2 = 1/2*P_stab**2*(Ixx-Izz)*sin(2*a)

print("Inertia Matrix in Stability Frame:")
print(I_s)
print()
print("Angular Velocity in body frame:")
print(w_b)
print()
print("Pitching Moment:")
print(m1)
print(m2)

import sympy as sp
import numpy as np
from IPython.display import display

# givens

w = 11000
Vv = 170
P = 750
p = .002377

Sw = 280
bw = 46
d = 9

B = np.radians(5)

# work

q = 1/2*p*(Vv)**2

Cl_level = w/(q*Sw)
Fpx = P*550/(Vv*np.cos(B))/2
Nth = -Fpx*d
Cnth = Nth/(q*Sw*bw)

print(Cl_level)
print(Fpx)
print(Nth)
print(Cnth)

Cnth = 1.1*Cnth

print(Cnth)

# work 2

Clda = 0.156
Cldr = 0.0087
Cnda = -.012
Cndr = -.15
Clb = -.13
Cnb = .12

K = sp.Matrix([[Clda, Cldr],
               [Cnda, Cndr]])

F = sp.Matrix([[Clb*B],
               [Cnb*B + Cnth]])

q = K.solve(-F)
da = float(q[0, 0])
dr = float(q[1, 0])

print(np.degrees(da), np.degrees(dr))

# work 3

Cyb = -.59
Cyda = 0
Cydr = .144

phi = np.arcsin(-(Cyb*B + Cyda*da + Cydr*dr)/Cl_level)
print(phi)
print(np.degrees(phi))

print(.644/3.44 + 0.07 -1.3/2 - 0.07 )

M = 0.52
AR = 3.58
b = 36.5
lam = 0.26
lam_c4 = np.radians(44.3)
hh = -0.42
lh = 13.7
Cla = 5.6

lam_c2 = np.arctan((AR*np.tan(lam_c4) - 4*(1/2 - 1/4)*(1 - lam)/(1 + lam))/AR)
print(np.degrees(lam_c2))

Ka = 1/AR - 1/(1 + AR**1.7)
print(Ka)

Klam = (10 - 3*lam)/7
print(Klam)

Kh = (1 - abs(hh/b))/(2*lh/b)**(1/3)
print(Kh)

k = Cla/(2*np.pi)
print(k)

B0 = np.sqrt(1 - 0**2)
BM = np.sqrt(1 - M**2)
print(B0, BM)

Cla0 = 2*np.pi*AR/(2 + np.sqrt(AR**2 * B0**2 / k**2 * (1 + (np.tan(lam_c2)**2)/B0**2) + 4))
print(Cla0)

ClaM = 2*np.pi*AR/(2 + np.sqrt(AR**2 * BM**2 / k**2 * (1 + (np.tan(lam_c2)**2)/BM**2) + 4))
print(ClaM)

deda = 4.44*(Ka*Klam*Kh*np.sqrt(np.cos(lam_c4)))**1.19 * ClaM/Cla0
print(deda)

from math import exp
S = 411
c = 11.93
lf = 46.73
wfm = 6
xcr = .423

Kf = 0.14*exp(5*xcr) - 0.045
print(Kf)

Cmaf = Kf*wfm**2*lf/(S*c)
print(Cmaf)

dx = -Cmaf/ClaM
print(dx)