# -*- coding: utf-8 -*-
"""orbit_determination.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1PhldqBqfUACKNxjFpklptRuJGUaKEXd2
"""

import numpy as np

# givens
rj = 71492                         # km
uj = 1.26686534E17*1E-9            # km^3/s^2

v1inf =    np.array([ -6.259,  4.916,  -0.767])   # km/s
r1    = rj*np.array([567.581, 418.157, 66.673])   # km

# ORBITAL PARAMETERS

h = np.cross(r1, v1inf)

r1_m = np.linalg.norm(r1)
v1inf_m = np.linalg.norm(v1inf)
h_m = np.linalg.norm(h)

a = uj/(2*uj/r1_m - v1inf_m**2)
e_m = np.sqrt(1 - (h_m**2)/(uj*a))

h_hat = h/h_m


i = np.arccos(h_hat[-1])
om = np.arcsin(h_hat[0]/np.sin(i))

# hard coded to choose the other option for om (sin has two different possibilities)
om = 3*np.pi/2 - (np.pi/2 + om)

e = 1/uj*(np.cross(v1inf, h) - uj/r1_m*r1)
e = np.matrix([[e[0]],
               [e[1]],
               [e[2]]])

R3 = np.matrix([[ np.cos(om), np.sin(om), 0],
                [-np.sin(om), np.cos(om), 0],
                [ 0         , 0         , 1]])

R1 = np.matrix([[1,  0        , 0        ],
                [0,  np.cos(i), np.sin(i)],
                [0, -np.sin(i), np.cos(i)]])

T_1_3_e = R1@R3@e

w = np.arctan(T_1_3_e[1, 0]/T_1_3_e[0, 0])

# hard coded to choose the other option for w (tan has two different possibilities)
w = np.pi + w

print("a: ", a)
print("e: ", e_m)
print("Om:", np.degrees(om))
print("i: ", np.degrees(i))
print("w: ", np.degrees(w))

# ORBITAL COORDS

R3_w = np.matrix([[ np.cos(w), np.sin(w), 0],
                  [-np.sin(w), np.cos(w), 0],
                  [ 0        , 0        , 1]])

T = R3_w@R1@R3

# VELOCITIES IN ORBITAL
psi = np.arccos(-1/e_m)
vinf_m = v1inf_m

v1inf_o = np.matrix([[-vinf_m*np.cos(psi)],
                   [vinf_m*np.sin(psi)],
                   [0]])


v2inf_o = np.matrix([[vinf_m*np.cos(psi)],
                   [vinf_m*np.sin(psi)],
                   [0]])


dv_o = v2inf_o - v1inf_o

dv_I = T.T@dv_o

rp = a*(1-e_m)
E = -uj/(2*a)
vj    =         np.matrix([[-9.840], [-8.182], [0.254]])

vp = np.sqrt(2*(E + uj/rp))

E2 = (vp + 0.1)**2/2 - uj/rp

v2inf = np.sqrt(2*E2)


v2inf_o = np.matrix([[v2inf*np.cos(psi)],
                   [v2inf*np.sin(psi)],
                   [0]])

v2inf = T.T@v2inf_o


v2 = v2inf + vj

print(np.linalg.norm(v2))

import numpy as np

rj    = 1.496E8*np.array([-3.567, 3.932, 0.064])
vj    =         np.array([-9.840, -8.182, 0.254])


v1inf =         np.array([ -6.259,  4.916,  -0.767])
r1    =   71492*np.array([567.581, 418.157, 66.673])

v2inf = T.T@v2inf_o
v2inf = np.array([v2inf[0, 0], v2inf[1, 0], v2inf[2, 0]])

r1_o = T@np.matrix([[r1[0]], [r1[1]], [r1[2]]])
r2_o = np.matrix([[r1_o[0, 0]], [-r1_o[1, 0]], [r1_o[2, 0]]])
r2 = T.T@r2_o
r2 = np.array([r2[0, 0], r2[1, 0], r2[2, 0]])

u = 1.32712440018E11

# +BEFORE

r = r1 + rj
v = v1inf + vj
h = np.cross(r, v)

h_m = np.linalg.norm(h)
r_m = np.linalg.norm(r)
v_m = np.linalg.norm(v)

h_hat = h/h_m

a = u/(2*u/r_m - v_m**2)
e_m = np.sqrt(1 - (h_m**2)/(u*a))
i = np.arccos(h_hat[-1])
om = np.arcsin(h_hat[0]/np.sin(i))


e = 1/u*(np.cross(v, h) - u/r_m*r)
e = np.matrix([[e[0]],
               [e[1]],
               [e[2]]])

R3 = np.matrix([[ np.cos(om), np.sin(om), 0],
                [-np.sin(om), np.cos(om), 0],
                [ 0         , 0         , 1]])

R1 = np.matrix([[1,  0        , 0        ],
                [0,  np.cos(i), np.sin(i)],
                [0, -np.sin(i), np.cos(i)]])

T_1_3_e = R1@R3@e

w = np.arctan(T_1_3_e[1, 0]/T_1_3_e[0, 0])
# hard coded to choose the other option for w (tan has two different possibilities)
w = np.pi + w

R3_w = np.matrix([[ np.cos(w), np.sin(w), 0],
                  [-np.sin(w), np.cos(w), 0],
                  [ 0        , 0        , 1]])

e = 1/u*(np.cross(v, h) - u/r_m*r)
phi = np.arccos(np.dot(e, r)/(e_m*r_m))

print("a: ", a)
print("e: ", e_m)
print("Om:", np.degrees(om + 2*np.pi))
print("i: ", np.degrees(i))
print("w: ", np.degrees(w))
print("phi:", np.degrees(phi))

# AFTER

r = r2 + rj
v = v2inf + vj
h = np.cross(r, v)

h_m = np.linalg.norm(h)
r_m = np.linalg.norm(r)
v_m = np.linalg.norm(v)

h_hat = h/h_m

a = u/(2*u/r_m - v_m**2)
e_m = np.sqrt(1 - (h_m**2)/(u*a))
i = np.arccos(h_hat[-1])
om = np.arcsin(h_hat[0]/np.sin(i))


e = 1/u*(np.cross(v, h) - u/r_m*r)
e_f = norm(e)
e = np.matrix([[e[0]],
               [e[1]],
               [e[2]]])


R3 = np.matrix([[ np.cos(om), np.sin(om), 0],
                [-np.sin(om), np.cos(om), 0],
                [ 0         , 0         , 1]])

R1 = np.matrix([[1,  0        , 0        ],
                [0,  np.cos(i), np.sin(i)],
                [0, -np.sin(i), np.cos(i)]])

T_1_3_e = R1@R3@e

w = np.arctan(T_1_3_e[1, 0]/T_1_3_e[0, 0])
# hard coded to choose the other option for w (tan has two different possibilities)
w = np.pi + w

R3_w = np.matrix([[ np.cos(w), np.sin(w), 0],
                  [-np.sin(w), np.cos(w), 0],
                  [ 0        , 0        , 1]])

e = 1/u*(np.cross(v, h) - u/r_m*r)
phi = np.arccos(np.dot(e, r)/(e_m*r_m))

print("a: ", a)
print("e: ", e_m)
print("Om:", np.degrees(om + 2*np.pi))
print("i: ", np.degrees(i))
print("w: ", np.degrees(w))
print("phi:", np.degrees(phi))

import numpy as np

# PROBLEM 2

# HOHMANN SECTION
us = 1.32712440018E11
Re = 149.6E6
Rv = 108.2E6

a_tr = (Re + Rv)/2
t_tr = np.pi*np.sqrt(a_tr**3/us)

nv = np.sqrt(us/Rv**3)
phase = nv*t_tr - np.pi

e = (Re - Rv)/(Re + Rv)
E = -us/(2*a_tr)

Vp = np.sqrt(2*(E + us/Rv))
Va = np.sqrt(2*(E + us/Re))

# HYBERBOLIC SECTION
Ve = np.sqrt(us/Re)
Vv = np.sqrt(us/Rv)

Vinf_e = Vp - Ve
Vinf_v = Vp - Vv

# HYPERBOLIC EARTH SECTION
ue = 398600.441
rp = 300 + 6378

vp = np.sqrt(Vinf_e**2 + 2*ue/rp)
vc = np.sqrt(ue/rp)
a = -ue/Vinf_e**2
e2 = 1 - rp/a

dv = vp - vc
psi = np.arccos(-1/e2)

import numpy as np

# PROBLEM 3

R = 6800
u = 398600.441
B = np.radians(30)
k = 2

T0 = 2*np.pi*np.sqrt(R**3/u)
n0 = 2*np.pi/T0
T1 = T0 - B/(n0*k)

print(T0)
print(T1)

a = (u * (T1/(2*np.pi))**2)**(1/3)

print(a)

va = np.sqrt(2*u/R - u/a)
vc = np.sqrt(u/R)

dv = 2*abs(va - vc)

print(dv)

#PROBLEM 4

from numpy import pi

Tg = 24*60*60
print(Tg)

ng = 360/Tg

print(ng)

theta = ng*9*3600

print(theta)

rg = 42186
rx = rg*np.cos(np.radians(theta))
ry = rg*np.sin(np.radians(theta))

print()
print(rx)
print(ry)

rxn = rx + .5
ryn = ry - .3
rzn = 0.3

print()
print(rxn)
print(ryn)
print(rzn)

rn = np.sqrt(rxn**2 + ryn**2 + rzn**2)
print()
print(rn)
print()

om = np.radians(125 + 180)


num = (-np.cos(om)*rxn + np.sin(om)*ryn)/rn


phi = np.arccos(num)
print(np.degrees(phi))
print("---")
a = rn*np.cos(phi)
b = rn*np.sin(phi)

print(rn*np.cos(phi))
print(rn*np.sin(phi))



num = .3/(np.sin(om)*rxn - np.cos(om)*ryn)

i = np.arctan(num)
print(np.degrees(i))
print()

a = (rg + rn)/2
print(a)
E = -u/(2*a)
print(E)

vcn = np.sqrt(ue/rn)

vg = np.sqrt(ue/rg)
print(vg)
print(vcn)
vp = np.sqrt(2*(E + ue/rn))
va = np.sqrt(2*(E + ue/rg))
print(vp)
print(va)
print()

d1 = vp - vcn
d2 = np.sqrt(va**2 + vg**2 - 2*vg*va*np.cos(i))

print(d2 + d1)